import org.openhab.core.library.types.*

import org.openhab.core.persistence.*

import org.openhab.model.script.actions.*

import org.openhab.core.library.types.DecimalType

var String[] buffer

rule "Update max and min temperatures"

when

	Item Weather_Temperature changed or

	Time cron "0 0 0 * * ?" or

	System started

then	

	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)

	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)

end



/** shows how to use sensor values from the past */

rule "Persistence Demo"

when

	Time cron "0 * * * * ?"

then	

	if(Weather_Temperature.changedSince(now.minusMinutes(1))) {

		println("2 minutes ago, the temperature was " + Weather_Temperature.historicState(now.minusMinutes(2)) + " degrees.")		

	}

end



/** 

 * shows how to check recent switch states - very helpful to avoid executing something too often, just

 * because somebody presses a button too often (e.g. sending a notification, if the doorbell button is pressed)

 */

// Creates an item that stores the last update time of this item

rule "Records last weather update time"

when

  Item Weather_Temperature received update

then

  postUpdate(Weather_LastUpdate, new DateTimeType())

end



rule "Turn on the lights"

when
  Item ArduinoCoordinator received update 
then
  buffer= ArduinoCoordinator.state.toString.split("~")
  if(buffer.get(0)=="4"){
     postUpdate (ArduinoSlave1, buffer.get(1))
  }
  else if(buffer.get(0)=="5"){
    postUpdate (ArduinoSlave2, buffer.get(1)) 	
  }
  else{
    postUpdate(ArduinoSlave1,buffer.get(1))
  }
end



//var Number counter = 0

rule "corLightOn"
when
        Item Motion_Sensor_Bedroom1 received update 
then
	if(Motion_Sensor_Bedroom1.state == CLOSED){
		sendCommand(ZBedroom1, OFF)
	}
	else{
        	sendCommand(ZBedroom1,ON)
	}
end

rule "hallwayLightOn"
when
        Item Motion_Sensor_Hall received update
then
        if(Motion_Sensor_Hall.state == CLOSED){
                sendCommand(ZHallway, OFF)
        }
        else{
                sendCommand(ZHallway,ON)
        }
end


rule "bed2LightOn"
when
        Item Motion_Sensor_Bedroom2 received update
then
        if(Motion_Sensor_Bedroom2.state == CLOSED){
                sendCommand(ZBedroom2, OFF)
        }
        else{
                sendCommand(ZBedroom2,ON)
        }
end


rule "ActivityBedroom1"

when
	Item Motion_Sensor_Bedroom1 received update
then
	if(Motion_Sensor_Bedroom1.state == CLOSED){
		sendCommand(ActivityBedroom1,OFF)
	}
	else{
		sendCommand(ActivityBedroom1,ON)
	}
end

rule "ActivityBedroom2"
when
        Item Motion_Sensor_Bedroom2 received update
then
        if(Motion_Sensor_Bedroom2.state == CLOSED){
                sendCommand(ActivityBedroom2,OFF)
        }
        else{
                sendCommand(ActivityBedroom2,ON)
        }
end

rule "ActivityHallway"
when
        Item Motion_Sensor_Hall received update
then
        if(Motion_Sensor_Hall.state == CLOSED){
                sendCommand(ActivityHallway,OFF)
        }
        else{
                sendCommand(ActivityHallway,ON)
        }
end
